# -*- coding: utf-8 -*-
"""IT1244_Team2_Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T5WbSGt49WAhn25J4BfZAu8DVF6JJDvj

# Final Support Vector Machine Model
* Import `Train_Set.csv` & `Test_Set.csv` from the Cancer Data Set and run the code block
* `y_pred_class_svm` contains the predicted class labels of the testing set. (1 = Cancer, 0 = Healthy)
"""

# Install Packages
import pandas as pd
import numpy as np
import random
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import StratifiedKFold
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from imblearn.over_sampling import SMOTE

# Set Seed for Reproducibility
np.random.seed(1244)
random.seed(1244)


# Data Preparation
train_data = pd.read_csv("data/Train_Set.csv")
test_data = pd.read_csv("data/Test_Set.csv")
train_data['class_label'] = train_data['class_label'].replace({'cancer': 1, 'healthy': 0})
test_data['class_label'] = test_data['class_label'].replace({'cancer': 1, 'healthy': 0})
train_x = train_data.iloc[:, :-1]  # training features
train_y = train_data['class_label']  # testing response
test_x = test_data.iloc[:, :-1] # testing features
test_y = test_data['class_label'] # testing response

# Standardize the Training and Testing Data
scaler = StandardScaler()
train_x_scaled = scaler.fit_transform(train_x)
train_x_scaled = pd.DataFrame(train_x_scaled, columns=train_x.columns)
test_x_scaled = scaler.transform(test_x)
test_x_scaled = pd.DataFrame(test_x_scaled, columns=test_x.columns)

# Feature Selection with PCA
selected_pcs = [1, 2, 3, 4, 6, 13, 17, 18, 19, 29, 30, 42, 45, 67]
n_pca = 75
pca = PCA(n_components=n_pca)
train_x_pca = pca.fit_transform(train_x_scaled)
test_x_pca = pca.transform(test_x_scaled)
train_x_pca = pd.DataFrame(train_x_pca, columns=[f'PC{i+1}' for i in range(n_pca)])
test_x_pca = pd.DataFrame(test_x_pca, columns=[f'PC{i+1}' for i in range(n_pca)])
selected_pcs_columns = [f'PC{i}' for i in selected_pcs]
train_x_pca = train_x_pca[selected_pcs_columns].reset_index(drop=True)
test_x_pca = test_x_pca[selected_pcs_columns].reset_index(drop=True)

# Handling Class Imbalance with SMOTE and K-Fold Cross Validation
smote = SMOTE(random_state = 1244)
X_resampled, y_resampled = smote.fit_resample(train_x_pca, train_y)
stratified_kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# Fitting Best Support Vector Machine Model
svm = SVC(random_state = 1244, C = 4.6, class_weight = "balanced", kernel = "linear", probability=True)
svm.fit(X_resampled, y_resampled)
y_scores_svm = svm.predict_proba(test_x_pca)[:, 1]
y_pred_class_svm = (y_scores_svm >= 0.669195).astype(int) # Threshold identified from ROC of report

# Final Prediction for Testing Data
print("Predicted Classes:", y_pred_class_svm)